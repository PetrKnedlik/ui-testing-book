## 1.2.3 Installing WebdriverIO and Basic Usage

The time has finally come! We've laid all the groundwork to understand the nuts and bolts behind UI testing, now it's time to do some!

To start off, we're going to create a new folder for all of our project to go in. Later on, we'll be incorporating this project into a fully-fledged application repo, but for now we'll create an individual WebdriverIO project.

So, in a directory of your choice, make a new folder called `wdio-standalone`:

```
mkdir wdio-standalone
```

Why `wdio-standalone`?

Well, WebdriverIO allows you to use it through two modes. The first, which we're going through here, is called "standalone" mode. It's meant as a simple way to use WebdriverIO, and allows you to build wrappers around the tool. 

"Testrunner" mode, which we'll cover in the next section, is a bit more complicated. It provides an entire set of tools and hooks for full-fledged integration testing. I mentioned that standalone mode allows you to build wrappers around it? Well, the testrunner is essentially that.

Right now, just to introduce you to WebdriverIO, we're going to use the standalone runner. This is only for this exercise though, and we'll be upgrading to the testrunner soon.

With all that said, let's 'move' our terminal into this `wdio-standalone` folder:

```
cd wdio-standalone
```

(For Windows, it's the same command for both actions)

Inside our new folder, we're going to initialize it as an NPM project. This will allow us to save the project dependencies that we'll be installing through NPM.

To do that, run:

```
npm init -y
```

The `-y` will answer 'yes' to all the prompts, giving us a standard NPM project. Feel free to omit the `-y` if you'd like to specify your project details.

With that out of the way, let's install WebdriverIO:

```
npm install webdriverio
```

Now is a good time to mention that WebdriverIO is split into multiple NPM packages. We'll be looking at those packages in detail later on, but know for now that installing `webdriverio` via the command above does not give you everything.

What it does give us is a Node.js module that we can use inside of a Node.js file. Let's use that.

First, we'll create a new file called 'test.js`:

```
touch test.js
```
 
On Windows, that command is:

```
type nul > test.js
```

Now we have a file to add our first test to. Go ahead and open that file up in the text editor of your choice.

Next, we'll copy the example given on the official WebdriverIO website. Throw the following code into your `test.js` file:

```js
const { remote } = require('webdriverio');

(async () => {
    const browser = await remote({
        capabilities: {
            browserName: 'chrome'
        }
    });

    await browser.url('https://webdriver.io');

    const title = await browser.getTitle();
    console.log('Title was: ' + title);

    await browser.deleteSession();
})().catch((e) => console.error(e));
```

Here's a quick overview of the file:

1. We load the `remote` object from the WebdriverIO package.
2. We wrap our code in an `async` function so we can use `await` statements.
3. We create a new session using `remote`, saving the reference to a `browser` object which we use to send commands.
4. We send a `url` command, requesting the browser go to the WebdriverIO homepage.
5. We then get the title of the page, storing it as a local variable.
6. The title of the page is logged to the terminal.
7. The session is ended, since we're done with our test.
8. A simple catch statement is added in case anything goes wrong.

Okay, that's what it does; let's run it to see it in action.

To do that, we need to start a Webdriver server. This server will accept the commands sent from WebdriverIO, run them in our desired browser, then report back the results. 

In "Browsers and 'Driving' Them", I detailed how to install and run Chromedriver and the selenium-standalone NPM package. Now let's put that knowledge to use.

### Running Through Selenium Standalone

_Note: Selenium Standalone is **not** the same thing as WebdriverIO Standalone mode. The simply share the same name to describe their "indepedent" nature._

First, we'll start with selenium-standlone. If you already have your server running from before, great! You don't need to do anything else.

But if not, open up a new terminal window and run `selenium-standalone start`. 

Aside from seeing the server running in your terminal, you can check that you have a Selenium instance up and running by visiting the following url in your browser: [http://localhost:4444/wd/hub](http://localhost:4444/wd/hub)

You should see a website looking a lot like this:

![IMAGE](images/36DFFD8164ACC4192A2D97CB974C62FC.jpg)

If you get a 404 error, something went wrong starting your server, and you'll need further debugging to resolve it.

Now that we have a selenium server running, we can run our test.

We do that by telling Node.js to execute our test file. That command looks like:

```sh
node test.js
```

If all was set up correctly, you should see a chrome window quickly pop-up, load the WebdriverIO homepage, then disappear.

In your terminal, you'll see something like the following output:

```sh
2019-02-20T03:10:41.594Z DEBUG wdio-config: @wdio/sync not found, running tests asynchronous
2019-02-20T03:10:41.873Z INFO webdriver: [POST] http://0.0.0.0:4444/wd/hub/session
2019-02-20T03:10:41.873Z INFO webdriver: DATA { capabilities: { alwaysMatch: { browserName: 'chrome' }, firstMatch: [ {} ] },
  desiredCapabilities: { browserName: 'chrome' } }
2019-02-20T03:10:45.136Z INFO webdriver: COMMAND navigateTo("https://webdriver.io")
2019-02-20T03:10:45.136Z INFO webdriver: [POST] http://0.0.0.0:4444/wd/hub/session/e3ed3a80bff9fc7a021d6c09cedbbcf3/url
2019-02-20T03:10:45.137Z INFO webdriver: DATA { url: 'https://webdriver.io' }
2019-02-20T03:10:47.180Z INFO webdriver: COMMAND getTitle()
2019-02-20T03:10:47.181Z INFO webdriver: [GET] http://0.0.0.0:4444/wd/hub/session/e3ed3a80bff9fc7a021d6c09cedbbcf3/title
2019-02-20T03:10:47.189Z INFO webdriver: RESULT WebdriverIO · Next-gen WebDriver test framework for Node.js
Title was: WebdriverIO · Next-gen WebDriver test framework for Node.js
2019-02-20T03:10:47.189Z INFO webdriver: COMMAND deleteSession()
2019-02-20T03:10:47.189Z INFO webdriver: [DELETE] http://0.0.0.0:4444/wd/hub/session/e3ed3a80bff9fc7a021d6c09cedbbcf3
```

![IMAGE](images/AA4D4E0244560ACB403160A59B041A44.jpg)

If you instead see an error that includes `Request failed due to Error: connect ECONNREFUSED 0.0.0.0:4444`, this means your Selenium server wasn't running. Start it back up and try again. 

Hopefully all went well though! Congrats, you've just run your first WebdriverIO test!

Let's try it out in Chromedriver instead.

### Running in Chromedriver

The basic idea is the same, although we do need to tweak our settings just a little bit.

See, when you start Selenium, it runs on port `4444` of your local machine. It also waits for requests to come through the `/wd/hub` URL endpoint (hence http://localhost:4444/wd/hub being mentioned before). 

Because Selenium is quite popular out there, WebdriverIO uses its settings in it's defaults.

Chromedriver, on the other hand, uses port `9515` and listens for commands to come through the root of the URL (so just http://localhost:9515)

So, we can either override the WebdriverIO defaults, or set Chromedriver up to mimic a Selenium server.

It's most useful in the example to see how to overwrite the WebdriverIO defaults, so let's do that.

Back in your `test.js` file, take a look at lines 4-8:

```js
const browser = await remote({
    capabilities: {
        browserName: 'chrome'
    }
});
```

What we're doing here is creating a new `remote` WebDriver session and telling it that we want to open up the 'chrome' browser. We'll get in to capabilities at a later point, so don't worry too much about it right now.

What we do want to worry about is how to customize that 'remote' session to use post 9515 instead of the default 4444 (plus a couple other changes).

Along with customizing the `capabilities`, there are a number of other options available to us. [The official documentation](https://webdriver.io/docs/options.html#webdriver-options) gives the entire list, but there are three we're going to change:

**hostname**
Host of your driver server.
Type: String
Default: 0.0.0.0

**port**
Port your driver server is on.
Type: Number
Default: 4444

**path**
Path to driver server endpoint.
Type: String
Default: /wd/hub

Due to security settings, Chromedriver won't accept requests coming from the 0.0.0.0 hostname address. We need to change that default to `localhost`.

And as mentioned before, we also need to change the port and path settings.

We can do all this by customizing the object passed into the `remote` function:

```js
const browser = await remote({
    hostname: 'localhost',
    port: 9515,
    path: '/',
    capabilities: {
        browserName: 'chrome'
    }
});
```

Now WebdriverIO will know the correct location to look for the WebDriver server, along with the custom hostname to use.

If you still have your Chromedriver instance running from before, leave it up and running (you can check http://localhost:9515/ to see if it gives you a response). If not, start an instance in a separate terminal window. 

With our WebdriverIO settings updated and Chromedriver ready to go, we can call our test script again.

Go ahead and run `node test.js` one more time and validate it all works.

### Leaving it at that

This will be the end of our little test file. We're not going to be updating it anymore, and will in fact be leaving this whole `wdio-standalone` folder behind.

Why? Because we're moving on to a much better way of using WebdriverIO through its test runner. That's coming up next.
