## 1.2.4 Upgrading to the WDIO Test Runner

There are a plethora of WebDriver tutorials out there. Many of them cover the basics of installing and running a specific tool, but lack the depth to teach you how to test at a larger scale. 

Here are several things most tutorials omit (mostly for the sake of time):

- How to manage settings across files
- How to integrate your tests with other tools
- How to extend these test tools with new features
- How to debug tests when they inevitably fail

You probably wouldn't think about these questions when first starting out (I know I didn't). It isn't until you've invested a fair amount of time that you're going to start feeling some pain from managing all your tests.

Unfortunately, that pain can stop you from growing your test suite. Instead of writing new tests, you're stuck writing functionality getting everything working together smoothly. 

This is where WebdriverIO goes above and beyond many other test tools out there. Instead of just being a Node.js tool for running WebDriver commands, it provides over 25 different packages that each fit a specific need.

Looking for a way to organize your code in a test framework like Mocha or Jasmine? That's already set up for you.

Want to integrate your tests with a third-party cloud testing platform like Sauce Labs or Browserstack? WebdriverIO has services for that.

Need to output the results of your tests through a reporter like Allure or Sumo Logic? There are pacakges for that as well.

WebdriverIO does all of this through a tool it calls the 'test runner'.

Instead of using WebdriverIO in 'standalone' mode, we run everything through the test runner, which integrates all the various moving parts together.

Standalone mode (how we wrote our first test) isn't bad; in fact, the test runner uses the standalone pacakge to run everything. It's just that the test runner addds on a great deal of functionality on top of it.

It also simplifies a lot of the complexity introduced when trying to solve the problems I listed above.

And here are some other benefits of the test runner:

- **Implicit async/await usage**: WebDriver commands are 'asynchronous' by nature. You're code needs a way to handle that. In JavaScript, async/await is that way. Unfortunately that concept can be a bit complex to understand. But if you aren't familiar with the terms async/await, that's perfectly fine, the test runner allows you to not worry about it. This lowers the barrier to entry in writing your first real test (it's one less thing to learn). And we will cover what async/await means at a later point in time.
- **Extra hooks**: Hooks allow you to run code during specific parts of your test flow. 14 separate hooks let you integrate code into different parts of your test run, giving you full control on how things execute.
- **Parallel test runs**: UI tests can certainly be slow. By running your tests in parallel (aka multiple tests at one time), you're able to reduce the time needed to run your test suite. The test runner takes care of the details in how to do this. 
- **Suites**: Chances are, on a site large enough, you're going to have multiple groups of functionality to test. With suites, you're able to partion off different sections of your test suite and run them individually. This is especially useful when debugging or developing new tests.

For all those reasons, and many more, the remaining portion of our examples will be carried out through the test runner. It makes the most sense for the majority of users out there.

### Let's get going

So, how do we go about using the test runner?

Well, let's set up a new fold for writing our tests in. Outside of the `wdio-standlone` folder you created, make a new folder called `wdio-testrunner`:

```sh
mkdir wdio-testrunner && cd wdio-testrunner
```

From inside of that folder, initialize a new NPM project:

```sh
npm init -y
```

That will create a `package.json` file that we'll again use for saving dependencies (among other things).

The test runner is part of the WDIO CLI package. CLI stands for "Command Line Interface", which is a way of using a program through textual input from the terminal. 

We install this interface using NPM:

```sh
npm install @wdio/cli
```

All the official WebdriverIO packages are namespaced under the `@wdio` scope. This makes it easier to distinguish between officially supported packages and third-party work contributed by the WebdriverIO community (caveat that the `webdriver` and `webdriverio` packages are officially supported, even though they don't use the `wdio` namespace). 

One thing we won't do is install the `webdriverio` package as we did before. That's because this package is included when installing the CLI package. Unless you're doing very custom work, you likely won't ever need to install the main `webdriverio` package. The CLI tool is a wrapper around the main `webdriverio` functionality, so it's your new goto tool for using the overall WebdriverIO tool suite.

Okay, enough about that. Let's get on with using this fancy new CLI tool.

Having installed the tool, you now have access to the `wdio` command in your terminal. This command let's you do a few things:

- Run a setup utility to create a common configuration file
- Run tests suites using said configuration files
- Run commands through a REPL, which is an interactive terminal utility for running one-off WebdriverIO commands

We'll take a look at the third option later, but for now, let's check out the first two.

### Setting up our configuration

In our original example, we defined a few options when initializing our WebdriverIO session. As a reminder, the code looked like:

```js
const browser = await remote({
    port: 9515,
    path: '/',
    capabilities: {
        browserName: 'chrome'
    }
});
```

All of that information inside the `remote` function call has to do with configurations on how we want our WebDriver session to be set up. If we were to stick with using standalone mode, we'd need to either duplicate this configuration across all of our test files, or figure out a way to share it through a common file.

Well, the test runner figures you'd probably want to go the route of sharing the configuration, and takes the step to do that work for you. By convention (meaning you can override this), your configurations will be stored inside a file called `wdio.conf.js`. Using the configurations we set above, that file may look like this:

```js
exports.config = {
    port: 9515,
    path: '/',
    capabilities: {
        browserName: 'chrome'
    }
}
```

That's pretty accurate, except that there are also a lot more options in the file. The test runner provides support for many different utilities (for example, custom reporters and services), so the file is usually over 200 lines long. That's a lot of options to set!

To help you with this, a configuration utility was provided through the CLI interface. This utility is run either when you specifically ask for it `wdio config`, or if you try and run the `wdio` command and it can't find an existing configuration file.

That's enough talk, let's give it a shot.

Since `@wdio/cli` is a command-line utility, it's setup to install to a special `.bin` folder inside our `node_modules` directory. This gives us two ways to run the utility:

```sh
$ ./node_modules/.bin/wdio
```

or 

```sh
$ npx wdio
```

Either way works, and they both do basically the same thing. Personally, I prefer using the `npx` method, as it's a bit easier for me to type. What you use is up to you, but I'll be giving my examples using the second way.

If you haven't done so already, go ahead and run either of those two commands we just looked at.

Even though we're not passing in the `config` flag to that command (although you certain can), it will see that we don't have a `wdio.conf.js` file available and start the config utility for us. 

You should see a screen like this appear:

![IMAGE](images/29B218703E76D944A64AE4336BC0259A.jpg)

What this configuration utility will do is ask you a series of questions in regards to how you want your tests to run. The first question asks where to launch your tests, and right now only gives you one option. We can therefore ignore it and just hit 'enter' to continue to the next question.

Now we have some real choices. It asks us `Where is your automation backend located?`. This is basically asking "where are you running your WebDriver server?"

There are many instances where you'd want to customize this, but for us, we're going to be running it locally using either `selenium-standalone` or `chromedriver`, so we'll stick with the first choice and hit 'enter' on `‚ùØ On my local machine`.

Next up it asks `Which framework do you want to use?`. We have two options, Mocha and Jasmine. Both are popular JavaScript test frameworks that have been around for years. But why do we need a test framework? Isn't that what WebdriverIO is?

No, not really. One of the great things about WebdriverIO is that it relies on existing solution instead of trying to invent its own. This gives you a ton of features with proven code that the community has already tested out through years of use. 

In this case, the features we're getting are improved organization and better error reporting, along with additional functionality such as pre and post test hooks. We'll look at all that later, but back to our options.

While the Jasmine framework is more than capable for meeting our needs, all the examples in this book will be using Mocha. This is for two reasons:

- Mocha is the more popular framework of the two, meaning you'll run in to it more often
- Almost all my professional experience has been through using Mocha, so I'm much more familiar with how it works and how you can take advantage of it.

With that said, hit that enter button again to choose mocha.

You should now be prompted with the question `Do you want to run WebdriverIO commands synchronous or asynchronous?` with the choices `sync` and `async`.

If you recall our first test script, there were these `async` and `await` keywords scattered throughout the file:

```js
(async () => {
    const browser = await remote(...);

    await browser.url('https://webdriver.io');

    const title = await browser.getTitle();

    await browser.deleteSession();
})().catch((e) => console.error(e));
```

I also mentioned `async/await` earlier on in this chapter. Why is this all needed?

When commands are issued to a WebDriver server, they don't happen immediately. There is an variable amount of time between sending the command and the browser having actually run it. Usually it only takes a few milliseconds, but in some cases it can take a second or two. There's no way of really knowing.

What this means for our script is that we need to wait for that command to finish before moving on to the next step. That's done through these `await` keywords (`async` is needed to tell Node.js that we'll be using these keywords.)

While helpful, they clutter up the code of our test. Wouldn't it be nicer if we didn't have to type all that out so that it looked more like this:

```js
const browser = remote(...);

browser.url('https://webdriver.io');

const title = browser.getTitle();

browser.deleteSession();
```

That's a lot cleaner and easier to scan through. Well, that's a feature the test runner gives you. It modifies the code you're running to automatically include those `await` statements, without you have to do the work yourself.

Going back to our options, if you wanted to, you could stick with the `async` style of writing all your `await` keywords yourself. But me, I'm lazy, and I'll take any chance I can to do less work. 

I'm going to assume you're like me and want to go with WebdriverIO handling the `async/await` nature of our tests (although you probably have better reasons than "I'm lazy"). To do that, choose `sync` as your option and hit enter. We'll still have a way to run custom `async` commands, but for now we've enabled a much simpler way to write our tests.

Next up it asks `Where are your test specs located? (./test/specs/**/*.js)`. 

By default they mark the location as the `test/specs` folder. However, you can change this if you prefer. We haven't created the folders yet but will in a second, so go with the default by pressing enter. Again, you can customize this if you prefer, but the examples in the book assume you used this default path. 

Just so you know, the `**` and `*` in the path is called a Glob pattern. That's a convention used to define where multiple files are at.

The `**` section says to look in all the sub-folders for files, so if we later organize our tests by feature (say we add a `login` or `checkout` folder) WebdriverIO will know to look in those subfolders as well as the main `test/specs` folder.

The `*` portion in `*.js` matches any file that ends with a `.js` extension. So it will match `test.js` and `login.js` but not `test.txt` or just `login`.

Okay, back to the questions. After that test file location, it asks `Which reporter do you want to use?`. Here we can make multiple choices. 

Reporters are utilities that display the results of our tests in a more consumable format. Some print directly to the terminal, and others display as websites you visit. Most of the reporters in this list are for advanced usage. The two you'd be interested in right now are `dot` and `spec`.

`dot` is the simpler of the two, printing out either red or green dots depending on if the test passed for failed (I'll let you guess which color means what).

`spec` will print out the name of the test in a heirarchal fashion, giving you a lot more information on how the test ran.

Here are the two reporters showing the results of the same test run

![IMAGE](images/EF5A75773DA8AA7DDFEF0F9AEB5D67E5.jpg)

On top is `dot`, which is quite succinct. `spec` is much more verbose, giving us more detail into what test specific failed.

I much prefer `spec` over `dot`, as I need to know these details. You'll probably want it as well, so leave it selected as the default choice.

We're now asked if we want any services set up for us. Services are useful extensions to the main WebdriverIO functionality. There are many official services, a plethora of third-party ones and you can even write your own.

You can find out more about each service by clicking in the link provided next to it. The one service we're interested in installing right now is the `selenium-standalone` service. Arrow down to it and click `space`, while also unchecking `chromedriver` (which is selected by default).

Note: If you'd prefer to skip the Java install associated with using `selenium-standalone`, I will talk about how to use the chromedriver service a couple sections later. Feel free to hit enter without selecting any options if that's your preference. 

The last question asks what `baseUrl` we want. By setting this value, we can shorten our `browser.url` calls. We'll talk about it soon, but for now just type in `https://webdriver.io` and hit enter. 

That finishes up all the questions. Now WebdriverIO takes over and runs the NPM installs for the packages we requested, along with building out our configuration file.

If all went well, you should see this message:

```
Configuration file was created successfully!
To run your tests, execute:
$ wdio wdio.conf.js
```

If you messed something up and need to run the config generator again, you can either delete your `wdio.conf.js` file and run the command again, or manually request the config builder with `npx wdio config`. Do know that this second option will overwrite any existing `wdio.conf.js` file.

As many options as we went through just now, the config file actually sets quite a few more. We'll take a look through this newly generated file next.
