## 1.2.2 Browsers and "Driving" Them

We normally use browsers by clicking with our mouse and typing with our keyboard. That works well for humans, but doesn't make sense when trying to write automated tests.

Instead of building some sort of physical robot that can control a mouse and type on a keyboard, we invented software that mimicks these actions. Selenium RC was one of the original tools to do this. WebDriver, which was also developed around the same time as Selenium RC, became a popular alternative. In 2009, the two teams combined forces to create Selenium WebDriver.

Over the years, standardization on the Selenium WebDriver commands occurred, and now there is [an official W3C spec for WebDriver](https://w3c.github.io/webdriver/). The teams behind the browsers we use have also started to implement that spec (e.g. chromedriver), allowing for use of WebDriver commands outside of Selenium. 

This is why WebdriverIO has the tagline "Next-gen WebDriver test framework for Node.js", excluding the term "Selenium". While you can use Selenium in your WebdriverIO tests, it's really just about running commands through a WebDriver-compliant client.

It's important not to confuse terms, so to be clear, the following list are all *different* things:

- **WebDriver**: A technical specification defining how tools should work.
- **The Selenium project**: An organization providing tools used for automated testing.
- **Selenium/Selenium Webdriver**: Language specific bindings for the Webdriver spec that are officially supported by the Selenium project, like the NPM package [selenium-webdriver](https://www.npmjs.com/package/selenium-webdriver).
- **Browser Driver**: Browser specific implementations of the Webdriver spec (e.g. Chromedriver, Geckodriver, etc).
- **Selenium Server**: A proxy server used to help run a variety of browser drivers.
- **WebdriverIO**: A test framework written in node.js that provides bindings for using WebDriver-compliant tools like Selenium Server and browser drivers (e.g. ChromeDriver).

### How to use a 'driver'?

There are several WebDriver clients available out there, Selenium Server being the most popular. Let's walk through getting one of these clients running so you can start writing tests.

#### Using a browser-specific client

All major browsers have respective 'drivers' that mostly follow the WebDriver spec (unfortunately there are still differences between them).

Here are the drivers for each major browser

- [Geckodriver](https://github.com/mozilla/geckodriver) for Firefox (v48 and above)
- [ChromeDriver](https://chromedriver.chromium.org/downloads) for Chromium.
- [Edgedriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) for Microsoft Edge
- [SafariDriver](https://developer.apple.com/documentation/webkit/about_webdriver_for_safari) for Safari - Implemented as a Safari browser extension.
- [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver) for Internet Explorer

To see how your favorite browser driver stacks up in regards to WebDriver support, check out [the Web Platform Tests page](https://wpt.fyi/results/webdriver/tests). This site runs regular tests against clients implementing the WebDriver spec, and provides the results showing how well they support it.

There are also drivers for mobile testing (e.g. Appium), but that won't be covered in this book. 

### Installing and Running Chromedriver

Installation instructions for these clients can be found on their respective homepage, but in many cases you can search on npmjs.org for Node.js based installation tools. 

For example, you can download and install Chromedriver using [the NPM Chromedriver package](https://www.npmjs.com/package/chromedriver).

To install the NPM package, run 

```
npm install -g chromedriver
```

![IMAGE](images/19777E6D3338056789E9EBC378A1D8CD.jpg)

You can then start a chromdriver instance by running:

```
chromedriver
```

![IMAGE](images/BB7464A817E912436260B942FD7FEF88.jpg)

This intance will continue to run until you stop it. To do that, issue an 'exit' command by pressing the `ctrl+c` key combo.

#### Installing and Running the Selenium Standalone Server

_First off, if you're going to be using this method, you need to ensure you have a recent version of Java installed on your computer. Be sure to take care of that before trying the following. I'll show examples using both selenium-standalone and chromedriver, so you're not required to do this._

If you're looking to run tests on a variety of browsers, you'll probably want to check out what the Selenium Server project does. It offers a 'hub' that allows you to start multiple browser instances and control them all through one single location.

While it's is possible to manually download and start [a selenium server](https://www.seleniumhq.org/download/), there is an NPM tool called "[selenium-standalone](https://github.com/vvo/selenium-standalone)" that makes all this much easier.

To install and use it, run the following from your terminal:

```
npm i -g selenium-standalone
```

This will make a global command available called `selenium-standalone`. With this command, we can do the following:

1. Install the four supported WebDriver clients (ChromeDriver, FirefoxDriver, IEDriver, Edge WebDriver)
2. Start a Selenium Server that acts as a proxy to these clients

To run the install, issue this command:

```
selenium-standalone install
```

![Install output](images/F1C94C62E9E56D60383555358950EE45.jpg)

You should only need to do this once (although you may need to run it again after driver updates occur).

Then, to start your server, run:

```
selenium-standalone start
```

![IMAGE](images/DB0D2292AFCF099D396202F158752795.jpg)

This server will run until it recieves an exit command (similar to how Chromedriver works). You can issue that command with the `ctrl+c` key combo).

We'll talk more on using both the Selenium Standalone Server and Chromedriver (including services to integrate them with WebdriverIO) in a little bit. 
