# 2.x Chapter Challenge Code Solutions

Each chapter includes a challenge or two for you to tackle on your own. But it's nice to check your work, so the following are solutions for each challenge.

## 2.1.1 Chai Assertions

Using 'should' style assertions:

```js
const should = require('chai').should();

describe('Homepage', function () {
  it('should load properly', function () {
    // load the page
    browser.url('./');

    // Get the title of the homepage, should be 'Conduit'
    browser.getTitle().should.equal('Conduit')

    // Click the 'Sign in' navigation link
    $('=Sign in').click();

    // Get the URL of the sign in page. It should include 'login'
    browser.getUrl().should.include('/login');
  })
})
```

Using 'assert' style assertions:

```js
const assert = require('chai').assert;

describe('Homepage', function () {
  it('should load properly', function () {
    // load the page
    browser.url('./');

    // Get the title of the homepage, should be 'Conduit'
    assert.equal(browser.getTitle(), 'Conduit')

    // Click the 'Sign in' navigation link
    $('=Sign in').click();

    // Get the URL of the sign in page. It should include 'login'
    assert.include(browser.getUrl(), '/login');
  })
})
```

## 2.1.2 Selectors

**Page Footer Text**

The developers of the site handed us a gift with this one, placing a unique `class` on the containing element called `attribution`. We can use that to write a simple CSS selector of:`$('.attribution')`

**All 'Tags' in the 'Popular Tags' sidebar**

Similar to the previous challenge, we have a class name of `sidebar` that we can use for this selector. We can combine it with a descendent selector using the `a` tag to target the tags: `$$('.sidebar a')`

Why not use the `tag-list` class instead? Think about what other elements might have this class name... If you look closely at the main feed, you'll see each article preview also has a `tag-list` class used. If we wanted to still use it, we'd need to be more specific with our selector and limit it to the `sidebar` container: `$$('.sidebar .tag-list a')`

**All 'Tags' in the 'Popular Tags' sidebar (using 'Popular Tags' header text). Hint: use `text()` and `following-sibling`**

This last one was the trickiest by far, and requires some XPath magic. First, we need to get the heading element by the text inside it. We can do this two ways:

- Using a full text match: `$('//p[text()="Popular Tags"]')`
- Using a partial text match: `$('//p[contains(text(), "Popular Tags")]')`

From there, we need to navigate over to the links. We can use the `following-sibling` modifier to move over to the `div` (`following-sibling::div`). From there, we can get all the links using the `a` tag.

All together, this is what your selector may look like: `$$('//p[contains(text(), "Popular Tags")]/following-sibling::div//a')`