## 1.2.7 Command Line Options (and Logging)

Now that we've gotten comfortable with the Test Runner, let's dig in to some advanced usage of the tool.

Out of the box, there are several command line overrides you can use to customize your tests runs on a case-by-case basis.

To get a full listing of all options, pass in the `help` option when running `npx wdio`:

```
npx wdio --help
```

It will output the various settings you can update from the command line.

![IMAGE](images/4982732B80CDC9E99121FDE218103FD4.jpg)

There are plenty of settings to configure, but most you won't use. There are a few common settings you'll tinker with on a regular basis though. Let's take a look at them.

### Config File

If you look at the first `usage` example, it shows:

```
Usage: wdio [options] [configFile]
```

There are three parts. First, the `wdio` command. Then any number of options. And finally, an optional path to a configuration file. 

By default, WebdriverIO will use the `wdio.conf.js` file (assuming you have one. If you want to have a different configuration file with different settings, this is how you can get WebdriverIO to use it.

Say I create a second configuration file called `wdio.alternative.conf.js`. I can use that file by running:

```
npx wdio wdio.alternative.conf.js
```

Now WebdriverIO will use that instead of `wdio.conf.js`.

As we get in to more advanced usage of the framework, we'll look into real-world examples of when you'd want to use a custom configuration file. Until then, let's check out those options.

### Spec

The first option you'll likely be using often is passing in a specific `spec` path. 

This is quite helpful when you need to test out a specific file. Instead of having to test all the files in your test folder, you can single out a single one.

Let's look at a couple of examples. Say you have the following test files:

```
/test/homepage.js
/test/search.js
/test/auth/login.js
/test/auth/logout.js
/test/auth/register.js
```

Five files total, with three of them being inside the `test/auth` folder.

Assuming your `specs` setting in your configuration file is set to `./test/**/*.js`, normally you'd run all five tests on each run.

If you want to run just the homepage test, you could do any one of the following:

```
npx wdio --spec=./test/homepage.js
npx wdio --spec=homepage.js
npx wdio --spec=home
```

The `spec` option takes either the exact path to the file you want to test, or a filter by filename. So all three above variations work because `./test/homepage.js` matches against all three.

Here's a different example: I want to run just the login/logout tests. I could do any of the following:

```
npx wdio --spec=./test/auth/login.js --spec=./test/auth/logout.js
npx wdio --spec=login --spec=logout
npx wdio --spec=./test/auth/log
npx wdio --spec=log
```

Notice in the first two options, we define the `spec` option twice, allowing us to choose two different files specifically.

As mentioned before, the `spec` option is very helpful when debugging individual tests. We'll be using it a lot going forward.

### Bail

One option we briefly talked about while going through the configuration file is `bail`. This will tell WebdriverIO to stop running tests after a certain number of test failures.

In our configuration, we have it set to 0, which means that it will run all the tests no matter the number of failures. This is useful when we want to see how our overall test suite runs.

But when debugging a set of tests, it can be useful to stop running them if there's a failure. Maybe you're uncertain if all your tests will pass, and you just want to see if there are any failures at all.

By passing in `--bail=1` as a command-line option, we can achieve that.

```
npx wdio --bail=1
```

Of course, we could set this to any number, but 1 is what will be used most, as you want to get back to fixing your broken tests right away.

### Base URL

Overriding the `baseUrl` can be helpful for times when you need to test the same site on a different server. Most often this occurs when you're testing a server on your local computer versus the test server. It can also be useful for one-time tests of special server spun up to run specific code.

In our settings, we defined our `baseUrl` as `https://webdriver.io`. And in our test, we used that url by changing our `browser.url` call.

Let's say we want to test the old version of the WebdriverIO website. That url is `http://v4.webdriver.io`. So to pass it in via the command line, we'd run:

```
npx wdio --baseUrl=http://v4.webdriver.io
```

When we run that, we're going to get an assertion error. That's because it went to the old site, which had a different page title from the new one. At least we know our test correctly catches errors!

![IMAGE](images/C32C072B870E5E8B9C33B717190F990F.jpg)

I use the `baseUrl` override only every so often, but it's certainly handy to have around.


### Log Level

Let's take a look at another option. We've run across the `logLevel` a couple times now, which defines how much console output to show when running your tests.

When you're debugging your tests, it can be helpful to see all the logs that WebdriverIO outputs. Other times you may not want any output at all. You can tweak this on a run-by-run basis by setting the `logLevel` option. 

So if I want to get as much output as possible, I'd do:

```
npx wdio --logLevel=trace
```

If I didn't want any logs, I'd do:

```
npx wdio --logLevel=silent
```

Let's try out that first option. 

As our test is running, you'll notice a section titled `Stdout:`

Below it, you should see logs appearing, which are describing what's currently happening. For example, the start of our logs would show:

```
Stdout:
2019-03-25T23:01:16.094Z DEBUG @wdio/utils:initialiseServices: initialise wdio service "selenium-standalone"
2019-03-25T23:01:16.208Z INFO @wdio/cli:Launcher: Run onPrepare hook
2019-03-25T23:01:18.209Z INFO @wdio/local-runner: Start worker 0-0 with arg: --logLevel=trace
[0-0] 2019-03-25T23:01:18.359Z DEBUG @wdio/config: @wdio/sync found, running tests synchronous
[0-0] 2019-03-25T23:01:18.507Z INFO @wdio/local-runner: Run worker command: run
```

As the test continues, old messages will "scroll" off the top of the log, while new messages appear at the bottom.

Notice that each log message has a 'type'. The first message in the example output above is DEBUG, which the second is INFO. These types are defined inside the core WebdriverIO code, and generally denote different types of messages. 

The log level is a heirarchal setup, having five levels:

- Trace
- Debug
- Info
- Warn
- Error

When setting the log level to `trace`, you'll get all the `trace` messages, plus all the types below it (so `debug`, `info`, `warn` and `error`).

If you were to choose `warn`, you'd only get those messages, plus any `error` messages.

After our tests have completed, WebdriverIO prints out the entirety of messages in a single section. Here's what that looks like:

```
Stdout:
2019-03-25T23:09:30.478Z DEBUG @wdio/utils:initialiseServices: initialise wdio service "selenium-standalone"
2019-03-25T23:09:30.576Z INFO @wdio/cli:Launcher: Run onPrepare hook
2019-03-25T23:09:32.443Z INFO @wdio/local-runner: Start worker 0-0 with arg: --logLevel=trace
[0-0] 2019-03-25T23:09:32.612Z DEBUG @wdio/config: @wdio/sync found, running tests synchronous
[0-0] 2019-03-25T23:09:32.808Z INFO @wdio/local-runner: Run worker command: run
[0-0] 2019-03-25T23:09:32.811Z DEBUG @wdio/utils:initialiseServices: initialise wdio service "selenium-standalone"
[0-0] 2019-03-25T23:09:32.998Z DEBUG @wdio/local-runner:utils: init remote session
[0-0] 2019-03-25T23:09:33.020Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session
[0-0] 2019-03-25T23:09:33.020Z INFO webdriver: DATA { capabilities: { alwaysMatch: { browserName: 'chrome' }, firstMatch: [ {} ] },
  desiredCapabilities: { browserName: 'chrome' } }
[0-0] 2019-03-25T23:09:36.429Z INFO webdriver: COMMAND navigateTo("https://webdriver.io/")
[0-0] 2019-03-25T23:09:36.430Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session/a9595e8f3eadc69e891252e1b818b7fc/url
2019-03-25T23:09:36.430Z INFO webdriver: DATA { url: 'https://webdriver.io/' }
[0-0] 2019-03-25T23:09:39.496Z INFO webdriver: COMMAND getTitle()
[0-0] 2019-03-25T23:09:39.497Z INFO webdriver: [GET] http://127.0.0.1:4444/wd/hub/session/a9595e8f3eadc69e891252e1b818b7fc/title
[0-0] 2019-03-25T23:09:39.513Z INFO webdriver: RESULT WebdriverIO Â· Next-gen WebDriver test framework for Node.js
[0-0] 2019-03-25T23:09:39.516Z INFO webdriver: COMMAND deleteSession()
[0-0] 2019-03-25T23:09:39.517Z INFO webdriver: [DELETE] http://127.0.0.1:4444/wd/hub/session/a9595e8f3eadc69e891252e1b818b7fc
2019-03-25T23:09:39.743Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 0
2019-03-25T23:09:39.744Z INFO @wdio/cli:Launcher: Run onComplete hook
```

Let's take a brief detour to walk through this activity. The first thing WebdriverIO does is initialize any services we requested. In this instance, we're using the `selenium-standalone` service, so we se log output for that. 

Next, it runs any `onPrepare` hooks we have defined. We don't have any, so we don't see any output from that. 

Next up, WebdriverIO starts "workers" for our tests. These are sub-processes spun up that our test will run in. The point of doing this is to allow for multiple tests to run at the same time (they'd all be different "workers"). 

Next, it checks to see if the test will run in `sync` or `async` mode. Since it found the `@wdio/sync` module, it runs in synchronous mode. 

It then sends the `run` command to the worker, letting it know it should get to work. The worker itself then initializes the `selenium-standalone` service, in case it needed to run anything inside of a specific worker (which it doesn't).

The next step is to get a browser running for use. These are called "sessions", and to get one WebdriverIO sends a POST request  (`[POST] http://127.0.0.1:4444/wd/hub/session`) with data (`DATA { capabilities: { alwaysMatch: { browserName: 'chrome' }, firstMatch: [ {} ] }, desiredCapabilities: { browserName: 'chrome' } }`) to the session endpoint on the Selenium server. The selenium server receives this request and initializes the session with the provided data. Combined, the two logs for this are:

```
[0-0] 2019-03-25T23:09:33.020Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session
[0-0] 2019-03-25T23:09:33.020Z INFO webdriver: DATA { capabilities: { alwaysMatch: { browserName: 'chrome' }, firstMatch: [ {} ] },
  desiredCapabilities: { browserName: 'chrome' } }
```

You'll notice this matches our capabilities settings in our config file, but has many more options specified. These are WebdriverIO defaults used to start a normal browser session. We could override them via the capabilities object in our config file if we so desired, but we don't right now so we'll leave them be.

Understanding the relationship between WebdriverIO and Selenium/Webdriver is helpful, so I want to take a little bit of extra time to review it. WebdriverIO doesn't actually run the browser automation, Selenium (or whatever Webdriver endpoint we're using) takes care of all of that. 

What WebdriverIO does provide is a JavaScript interface for sending commands to run. It does this through REST API calls, which means that it sends an HTTP request to specific endpoints on the Selenium server. Basically, WebdriverIO and Selenium have a common language they share (defined in [the official Webdriver spec](https://w3c.github.io/webdriver/)) to send data back and forth. WebdriverIO sends commands to Selenium for it to run, then Selenium sends the results of those commands back.

Take the `getUrl` command in the next few lines. WebdriverIO sends a request to the Selenium hub at the `wd slash hub slash session id slash url` endpoint. In the request, it passes along information about the url for the browser to go to. After Selenium receives and processes this request, it returns the results of the command execution (which is empty). WebdriverIO doesn't output this information, as there isn't anything to show.

Overall, the logs for this look like:

```
[0-0] 2019-03-25T23:09:36.429Z INFO webdriver: COMMAND navigateTo("https://webdriver.io/")
[0-0] 2019-03-25T23:09:36.430Z INFO webdriver: [POST] http://127.0.0.1:4444/wd/hub/session/a9595e8f3eadc69e891252e1b818b7fc/url
2019-03-25T23:09:36.430Z INFO webdriver: DATA { url: 'https://webdriver.io/' }
```

In the next set of logs, WebdriverIO requests the page title from the Browser. No data is sent to Selenium, as there isn't any information to send.  Instead, Selenium returns data back to us, namely, the title of the page. You see this in the "result" log output and sequentially, the console output we sent in our test:

```
[0-0] 2019-03-25T23:09:39.496Z INFO webdriver: COMMAND getTitle()
[0-0] 2019-03-25T23:09:39.497Z INFO webdriver: [GET] http://127.0.0.1:4444/wd/hub/session/a9595e8f3eadc69e891252e1b818b7fc/title
[0-0] 2019-03-25T23:09:39.513Z INFO webdriver: RESULT WebdriverIO Â· Next-gen WebDriver test framework for Node.js
```

Finally, WebdriverIO closes our browser by sending a `DELETE` request for our session endpoint. Once it gets the successful close message, it closes down the worker and runs the `onComplete` hook. With that the test is complete.

That was a lot of logs. What if we want to ignore all this output and only show the basics (plus any `console.log` messages we may have added). Let's see what the log output looks like when running it at `silent`:

```
Stdout:
2019-03-25T23:19:00.503Z DEBUG @wdio/utils:initialiseServices: initialise wdio service "selenium-standalone"
2019-03-25T23:19:00.594Z INFO @wdio/cli:Launcher: Run onPrepare hook
2019-03-25T23:19:02.518Z INFO @wdio/local-runner: Start worker 0-0 with arg: --logLevel=silent
2019-03-25T23:19:08.766Z DEBUG @wdio/local-runner: Runner 0-0 finished with exit code 0
2019-03-25T23:19:08.770Z INFO @wdio/cli:Launcher: Run onComplete hook
```

There's still some output, but not much at all. This is helpful if you have console.log messages that you want to be able to see without any extra noise.

### Other options

That about sums it up for what I feel are the most important options. There are other settings you can configure, but that would be too in-depth and personalized for the good of this book. Feel free to experiment, and remember, you can get all the options by running `npx wdio --help`.
